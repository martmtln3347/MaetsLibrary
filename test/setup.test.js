// test/setup.test.js
import { execSync } from "child_process";
import dotenv from "dotenv";
import mongoose from "mongoose";
import GameConfig from "../Modele/config.model.js";

dotenv.config();

let memoryServer; // mongodb-memory-server instance

async function connectMongoForTests() {
  // 1) Si MONGO_URL est d√©fini, on tente une connexion r√©elle
  if (process.env.MONGO_URL) {
    try {
      console.log("üîó Tentative de connexion MongoDB via MONGO_URL‚Ä¶");
      await mongoose.connect(process.env.MONGO_URL, { serverSelectionTimeoutMS: 5000 });
      console.log("‚úÖ MongoDB r√©el connect√© (tests)");
      return;
    } catch (e) {
      console.warn("‚ö†Ô∏è Connexion MongoDB r√©elle impossible:", e.message);
    }
  }

  // 2) Fallback : mongodb-memory-server (en m√©moire)
  console.log("üß™ D√©marrage d'un MongoDB en m√©moire pour les tests‚Ä¶");
  const { MongoMemoryServer } = await import("mongodb-memory-server");
  memoryServer = await MongoMemoryServer.create();
  const uri = memoryServer.getUri();
  await mongoose.connect(uri, { serverSelectionTimeoutMS: 5000 });
  console.log("‚úÖ MongoDB en m√©moire connect√© (tests)");
}

before(async function () {
  this.timeout(30000); // seed SQL + connexion Mongo + index

  console.log("‚ôªÔ∏è  R√©initialisation de la base de donn√©es SQL avant les tests‚Ä¶");
  try {
    execSync(
      `mysql -h ${process.env.MYSQL_HOST} -P ${process.env.MYSQL_PORT} -u ${process.env.MYSQL_USER} -p${process.env.MYSQL_PASSWORD} ${process.env.MYSQL_DATABASE} < seed.sql`,
      { stdio: "inherit", shell: true }
    );
    console.log("‚úÖ Base SQL de test r√©initialis√©e !");
  } catch (err) {
    console.error("‚ùå Erreur lors du reset SQL :", err.message);
    throw err;
  }

  // Connexion Mongo (r√©elle si possible, sinon en m√©moire)
  await connectMongoForTests();

  // Synchroniser les index (unicit√© userId+gameId)
  try {
    await GameConfig.syncIndexes();
    console.log("üß± Index MongoDB synchronis√©s (GameConfig)");
  } catch (e) {
    console.warn("‚ö†Ô∏è syncIndexes(GameConfig) a √©chou√©:", e.message);
  }
});

after(async () => {
  if (mongoose.connection.readyState !== 0) {
    await mongoose.disconnect();
    console.log("üëã D√©connexion MongoDB (tests) effectu√©e");
  }
  if (memoryServer) {
    await memoryServer.stop();
    console.log("üßπ MongoDB en m√©moire arr√™t√©");
  }
});
